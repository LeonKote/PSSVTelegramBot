package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/LeonKote/PSSVTelegramBot/microservices/notifications/internal/models"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (bot *Bot) HandleCallback(update tg.Update) {
	data := update.CallbackData()

	// –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ("approve:123456789")
	action, userID, err := bot.parseCallbackData(data)
	if err != nil {
		log.Printf("Can not parse callback data: %s", err)
	}

	switch action {
	case "approve":
		user, err := bot.usersAPI.GetUserByChatID(userID)
		if err != nil {
			log.Printf("Can not get user by chat_id: %s", err)
		}

		ok, err := bot.usersAPI.UpdateUser(models.User{
			Chat_ID:  userID,
			Username: user.Username,
			Name:     user.Name,
			Is_Admin: false,
			Status:   "approved",
		})
		if err != nil || !ok {
			log.Printf("Can not update user: %s", err)
		}

		messageID, exists := LastActions[userID]
		if !exists {
			log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			return
		}

		editMsg := tg.NewEditMessageText(userID, messageID, "üéâ –í–∞–º –æ–¥–æ–±—Ä–∏–ª–∏ –¥–æ—Å—Ç—É–ø!")
		newMsg, err := bot.tgAPI.Send(editMsg)
		if err != nil {
			log.Printf("Can not send msg: %s", err)
		} else {
			LastActions[userID] = newMsg.MessageID
		}

		bot.MakeMessage(update, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!")

		buttons := tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–ù–∞—á–∞—Ç—å", toMain),
			),
		)

		msg := tg.NewMessage(userID, "‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.")
		msg.ReplyMarkup = buttons

		if _, err := bot.tgAPI.Send(msg); err != nil {
			log.Printf("Can not send msg: %s", err)
		}

	case "reject":
		user, err := bot.usersAPI.GetUserByChatID(userID)
		if err != nil {
			log.Printf("Can not get user by chat_id: %s", err)
		}

		ok, err := bot.usersAPI.UpdateUser(models.User{
			Chat_ID:  userID,
			Username: user.Username,
			Name:     user.Name,
			Is_Admin: false,
			Status:   "rejected",
		})
		if err != nil || !ok {
			log.Printf("Can not update user: %s", err)
		}

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		messageID, exists := LastActions[userID]
		if !exists {
			log.Println("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
			return
		}

		editMsg := tg.NewEditMessageText(userID, messageID, "üö´ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
		newMsg, err := bot.tgAPI.Send(editMsg)
		if err != nil {
			log.Println(err)
		} else {
			LastActions[userID] = newMsg.MessageID
		}

		bot.MakeMessage(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
	case toCameras:
		cameras, err := bot.camerasAPI.GetAllCameras()
		if err != nil {
			log.Printf("Invalid get all cameras: %s", err)
		}

		camerasMarkup := bot.getCameraButtons(cameras)
		bot.MakeButton(update, "üì∏ –°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä:", camerasMarkup)
	case toUsers:
		buttons := tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", toMain),
			),
		)

		bot.MakeButton(update, "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", buttons)
	case toAdd:
		buttons := tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", toMain),
			),
		)

		bot.MakeButton(update, "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –ø–æ –µ—ë MAC-–∞–¥—Ä–µ—Å—É", buttons)
	case toMain:
		buttons := tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("üì∏ –°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä", toCameras),
			),
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", toUsers),
			),
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –ø–æ –µ—ë MAC-–∞–¥—Ä–µ—Å—É", toAdd),
			),
		)
		bot.MakeButton(update, "–ú–µ–Ω—é", buttons)
	}
}

func (bot *Bot) MakeButton(update tg.Update, desc string, buttons tg.InlineKeyboardMarkup) {
	msg := tg.NewEditMessageText(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID, desc)

	keyboard := buttons
	msg.ReplyMarkup = &keyboard

	if _, err := bot.tgAPI.Send(msg); err != nil {
		log.Println(err)
	}
}

func (bot *Bot) parseCallbackData(data string) (action string, userID int64, err error) {
	parts := strings.Split(data, ":")

	action = parts[0] // ‚úÖ –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å

	if len(parts) > 1 { // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
		userID, err = strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			return "", 0, fmt.Errorf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userID: %w", err)
		}
	} else {
		userID = 0 // ‚úÖ –ï—Å–ª–∏ userID –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
	}

	return action, userID, nil
}

func (bot *Bot) getCameraButtons(cameras []models.Camera) tg.InlineKeyboardMarkup {
	var buttons [][]tg.InlineKeyboardButton

	for index, camera := range cameras {
		if camera.Name == "" {
			camera.Name = fmt.Sprintf("–ö–∞–º–µ—Ä–∞ %d", index)
		}
		// –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–µ—Ä—ã
		button := tg.NewInlineKeyboardButtonData(camera.Name, fmt.Sprintf("camera:%d", camera.Id))
		buttons = append(buttons, tg.NewInlineKeyboardRow(button))
	}
	back := tg.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", toMain)
	buttons = append(buttons, tg.NewInlineKeyboardRow(back))

	return tg.NewInlineKeyboardMarkup(buttons...)
}
